package by.sam.Government;

public class taskDescription {
    /*Дополнительное задание "Государство" на повторение изученного (и немного нового). Задание вам покажется не самым простым, но подобные таски необходимы для вашего роста:

1. Создать объект класса Государство (класс Государство определить используя паттерн проектирования Singleton (антипаттерн)),
используя классы Область, Район, Город. (данные для всех этих классов можно тоже сгенерировать случайно, а можно "захардкодить"- т.е. ввести и создать прямо в коде)
2. Создать класс Гражданин, содержащий поля (5 штук): id, имя, фамилию, возраст, Государство (ссылка на объект их государства).
2.1 id должны быть уникальны для каждого создаваемого гражданина (id не должен вводиться руками или генерироваться с помощью rand()).
2.2 id должен быть целым положительным числом.
2.3 не должно быть возможности изменить уже имеющийся id гражданина).
2.4 Имя и фамилию генерировать из случайного набора букв английского алфавита (например c длиной от 5 до 10 символов.
Все буквы могут быть маленькими), возраст генерировать тоже случайно (но реалистично).
2.5 процесс генерации объекта гражданина должен происходить в соответствующей данной задаче синтаксической конструкции языка. (Что вызывается при создании объекта?)
2.6 Все поля Гражданина должны быть скрыты от внешнего прямого доступа с помощью модификаторов доступа
2.7 доступ к полям должен осуществляться с помощью соответствующих этой задаче методов
3. Создать коллекцию/коллекции внутри объекта/объектов (логически подходящего/щих для этого) наполненную/наполненные сгенерированными объектами граждан.
4. Создать меню выбора действий (какую информацию выводить) для пользователя через бесконечный цикл
5. Через выбор пользователя:
5.1 вывести на консоль столицу,
5.2 количество областей,
5.3 площадь государства,
5.4 областные центры,
5.5 средний возраст жителей,
5.6 жителей у которых имя состоит из n букв (число n вводится с клавиатуры).
5.7 пункты 5.2 - 5.6 должны считаться в момент вызова метода, а не заранее. (т.е. пользователь делает выбор → вызывается метод → вычисляются данные)
6. Вывести список жителей у которых имя начинается с буквы char m (символ m вводится с клавиатуры).
7. Вывод может быть красиво отформатирован (например список жителей для 1 области, для второй и т.д.).
8. Вывод должен осуществляться с использованием метода toString() класса Гражданин И метода toString() другого класса в зависимости от вашей логики (например toString() класса "Государство")
9. Приветствуется архитектура близкая к MVC, которую я показывал. (но можно использовать и простую архитектуру первых 6 недель)
10. Напишите тестовый класс используя TestNG. В соответствующем методе создайте необходимые объекты задания "Государство" и 5 объектов граждан.
Напишите тесты нескольких методов на ваш выбор из пункта 5, используя созданные экземпляры классов.

Важно:
не создавайте слишком много Граждан, чтобы не закончилась оперативная память. Достаточно нескольких тысяч.
Если не будет хватать оперативной памяти, уменьшите их количество.

Подсказки:
1. у каждого символа char eсть соответствующее ему число
2. помимо прочих где-то в коде будут использоваться ключевые слова (не вместе): final, static

Критерии оценки:
- правильная структура проекта;
- правильные имена классов, методов, переменных;
- ожидается много коммитов с сообщениями, описывающими изменения;
- работающая логика;
- чистота кода;
- в частности переиспользование кода. (например подумайте, можно ли создать отдельный метод и переиспользовать rand());*/
}
